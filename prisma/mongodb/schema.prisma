// MongoDB schema for reviews and comments

generator client {
  provider = "prisma-client-js"
  output   = "../../lib/generated/mongodb-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

// Review model for product reviews
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int      @db.Int
  title     String   @db.String
  content   String   @db.String
  helpful   Int      @default(0) @db.Int
  
  // Relations
  userId    String   @db.String
  productId String   @db.String
  comments  Comment[]

  // Performance indexes
  @@index([productId, createdAt]) // For fast product review listing
  @@index([userId, createdAt]) // For fast user review history
  @@index([rating]) // For aggregating product ratings
  @@index([helpful]) // For sorting by most helpful

  // MongoDB specific configuration
  @@map("reviews")
}

// Comment model for review comments
model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.String
  helpful   Int      @default(0) @db.Int
  
  // Relations
  userId    String   @db.String
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String   @db.ObjectId
  
  // Optional parent comment for nested replies
  parentId  String?  @db.ObjectId
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")

  // Performance indexes
  @@index([reviewId, createdAt]) // For fast comment listing per review
  @@index([userId, createdAt]) // For user comment history
  @@index([parentId]) // For efficient nested comment queries
  @@index([helpful]) // For sorting by most helpful

  // MongoDB specific configuration
  @@map("comments")
} 